{
	"info": {
		"_postman_id": "49374120-52f8e5c0-ac2c-48e0-9a29-006caee3b235",
		"name": "Products API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Product Retrieval",
			"item": [
				{
					"name": "Get All Products",
					"event": [
						{
							"id": "4c1590c6-6896-4e56-90d8-1c2bbf79dc30",
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Get All Products (in folder Product Retrieval) - Test Script",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of products\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;",
									"});",
									"",
									"pm.test(\"Each product has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(product) {",
									"            pm.expect(product).to.have.property(\"id\");",
									"            pm.expect(product).to.have.property(\"name\");",
									"            pm.expect(product).to.have.property(\"price\");",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Handles 4xx/5xx errors gracefully\", function () {",
									"    pm.expect([200, 400, 404, 500]).to.include(pm.response.code);",
									"});",
									""
								]
							}
						}
					],
					"id": "49374120-ccb410d9-6047-4e98-9d75-3e6e98e14698",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				}
			],
			"id": "49374120-46db5aac-1e62-48a9-87cd-8c604478771a"
		},
		{
			"name": "Get All Products",
			"event": [
				{
					"id": "e6593c7a-de20-4da6-83a3-33fc4633bc3f",
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Get All Products - Test Script",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array of products\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;",
							"});",
							"",
							"pm.test(\"Each product has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.length > 0) {",
							"        jsonData.forEach(function(product) {",
							"            pm.expect(product).to.have.property(\"id\");",
							"            pm.expect(product).to.have.property(\"name\");",
							"            pm.expect(product).to.have.property(\"price\");",
							"        });",
							"    }",
							"});",
							"",
							"pm.test(\"Handles 4xx/5xx errors gracefully\", function () {",
							"    pm.expect([200, 400, 404, 500]).to.include(pm.response.code);",
							"});",
							""
						]
					}
				}
			],
			"id": "49374120-29bc1896-6c02-41ac-b31c-5cd85b74291f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product by ID",
			"event": [
				{
					"id": "a527cd13-8259-4d08-8431-37d2f184cefc",
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Get Product by ID - Test Script",
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect([200, 404]).to.include(pm.response.code);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response is a product object\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.be.an(\"object\");",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"        pm.expect(jsonData).to.have.property(\"name\");",
							"        pm.expect(jsonData).to.have.property(\"price\");",
							"    });",
							"}",
							"",
							"if (pm.response.code === 404) {",
							"    pm.test(\"Product not found error structure\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"error\");",
							"    });",
							"}",
							""
						]
					}
				}
			],
			"id": "49374120-1914f557-b8bd-449a-b01c-50e1f80c1042",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/products/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product",
			"event": [
				{
					"id": "010f3d57-38cd-4051-8045-3f1ea3cdb738",
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Create Product - Test Script",
							"pm.test(\"Status code is 201 or 400\", function () {",
							"    pm.expect([201, 400]).to.include(pm.response.code);",
							"});",
							"",
							"if (pm.response.code === 201) {",
							"    pm.test(\"Product created successfully\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.be.an(\"object\");",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"        pm.expect(jsonData).to.have.property(\"name\");",
							"        pm.expect(jsonData).to.have.property(\"price\");",
							"    });",
							"}",
							"",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Validation error structure\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"error\");",
							"    });",
							"}",
							""
						]
					}
				}
			],
			"id": "49374120-80f44bcd-34d3-4783-a765-15230a0d9807",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Keyboard\", \"description\": \"Mechanical RGB keyboard\", \"price\": 12.99, \"category\": \"Accessories\", \"inStock\": true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product",
			"event": [
				{
					"id": "c08e490d-b18b-4b6a-8953-6387eb736417",
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Update Product - Test Script",
							"pm.test(\"Status code is 200, 400, or 404\", function () {",
							"    pm.expect([200, 400, 404]).to.include(pm.response.code);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Product updated successfully\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.be.an(\"object\");",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"        pm.expect(jsonData).to.have.property(\"name\");",
							"        pm.expect(jsonData).to.have.property(\"price\");",
							"    });",
							"}",
							"",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Validation error structure\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"error\");",
							"    });",
							"}",
							"",
							"if (pm.response.code === 404) {",
							"    pm.test(\"Product not found error structure\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"error\");",
							"    });",
							"}",
							""
						]
					}
				}
			],
			"id": "49374120-5e577019-c3de-4aed-8609-c6e7738aec7b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"price\": 1399.99}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/products/3",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Product",
			"event": [
				{
					"id": "8dc651e5-14f0-46ec-81c7-b0287f8a9731",
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Delete Product - Test Script",
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect([200, 404]).to.include(pm.response.code);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Product deleted successfully\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.be.an(\"object\");",
							"        pm.expect(jsonData).to.have.property(\"message\");",
							"    });",
							"}",
							"",
							"if (pm.response.code === 404) {",
							"    pm.test(\"Product not found error structure\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"error\");",
							"    });",
							"}",
							""
						]
					}
				}
			],
			"id": "49374120-e536cb44-59b0-4b0c-8f19-736ffca7e14a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/products/3",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products",
						"3"
					]
				}
			},
			"response": []
		}
	]
}